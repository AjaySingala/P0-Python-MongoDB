SQL: Structured Query Language

Queries
	CRUD -> Create, Read, Update, Delete.
	
	DML: Data Manipulation Language
		Create: INSERT
		Read:	SELECT
		Update:	UPDATE
		Delete:	DELETE
		
	DDL: Data Definition Language
		CREATE DATABASE
		CREATE TABLE
		CREATE VIEW
		CREATE INDEX
		CREATE PROCEDURE
		
		ALTER TABLE
		ATLER PROCECURE
		
		TRUNCATE (delete all rows in a table)
		
		
CREATE TABLE <tablename>(
	column_1 type <constraint>,
	column_2 type <constraint>,
	:
	:
	column_n type <constraint>,
)

INSERT INTO <tablename> (column_1, column_2,...column_n)
VALUES(value_1, value_2,...value_n)

SELECT <* | column_1, column_2,...column_n> FROM <tablename>

BEGIN TRANSACTION;

/* Create a table called NAMES */
CREATE TABLE NAMES(Id integer PRIMARY KEY, Name text);

/* Create few records in this table */
INSERT INTO NAMES(Id, Name) VALUES(1,'Tom');
INSERT INTO NAMES VALUES(2,'Lucy');
INSERT INTO NAMES VALUES(3,'Frank');
INSERT INTO NAMES VALUES(4,'Jane');
INSERT INTO NAMES VALUES(5,'Robert');
COMMIT;

/* Display all the records from the table */
SELECT * FROM NAMES;
SELECT Name FROM NAMES;

# WHERE Clause.
SELECT ... FROM ... WHERE <condition>


ALIAS => another name / temporary name

SELECT o.OrderId, o.CustomerId, c.CustomerName, o.EmployeeID, e.Firstname, e.Lastname
FROM Orders as 
INNER JOIN Customers as c ON o.CustomerId = c.CustomerId
INNER JOIN Employees as e ON o.EmployeeID = e.EmployeeID

UPDATE <tablename>
SET column_1 = <new value>
[, column_2 = <new value>, column_n = <new value>]
WHERE <condition>

INSERT INTO Customers
VALUES (101, 'Ajay', 'Singala', 'Mumbai', 'Mumbai', '400067', 'India')

UPDATE Customers
SET Address = 'ABC Road'
WHERE CustomerId = 101

UPDATE Customers
SET Address = 'ABC Road',
ContactName = 'Mr. XYZ',
CustomerName = 'John Smith'
WHERE CustomerId = 101


DELETE FROM <table>
WHERE <condition>

DELETE FROM Customers
WHERE CustomerId = 101

Display data from the following tables:
	Orders
	Customers
	OrderDetails
	Products
	Shippers
	
OrderId, OrderDate, CustomerId, CustomerName, ProductId, ProductName, Quantity, ShipperId, ShipperName

SELECT 
	o.OrderId, 
	o.OrderDate, 
	o.CustomerId, 
	c.CustomerName, 
	od.ProductId, 
	p.ProductName, 
	od.Quantity, 
	s.ShipperId, 
	s.ShipperName,
	p.SupplierId, 
	su.SupplierName
FROM Orders o
INNER JOIN OrderDetails od ON o.OrderId = od.OrderId
INNER JOIN Customers c ON o.CustomerId = c.customerId
INNER JOIN Products p ON od.ProductId = p.ProductId
INNER JOIN Shippers s ON o.ShipperId = s.ShipperId
INNER JOIN Suppliers su ON p.SupplierId = su.SupplierId

#Aggregation:
	Grouping records
	SUM, MAX, MIN, AVG, COUNT
	
SELECT od.OrderDetailID, od.OrderID, od.ProductID, p.ProductName, od.Quantity, p.Price, (od.Quantity * p.Price) AS 'Amount'
FROM [OrderDetails] od
INNER JOIN Products p ON od.ProductId = p.ProductID

SELECT * FROM [OrderDetails]
WHERE ProductId = 2
OR ProductId =1
ORDER BY ProductId, Quantity

SELECT * FROM [OrderDetails]
WHERE ProductId IN (1, 2)
ORDER BY ProductId, Quantity

SELECT od.ProductID, p.ProductName, SUM(od.Quantity) AS 'TotalQtySold', MIN(od.Quantity), MAX(od.quantity), COUNT(od.ProductId), AVG(od.Quantity)
FROM [OrderDetails] od
INNER JOIN Products AS p ON od.ProductId = p.ProductID
GROUP BY od.ProductID, p.ProductName

SELECT od.ProductID, p.ProductName, p.Price, SUM(od.Quantity) AS 'TotalQtySold', MIN(od.Quantity), MAX(od.quantity), COUNT(od.ProductId), AVG(od.Quantity)
FROM [OrderDetails] od
INNER JOIN Products AS p ON od.ProductId = p.ProductID
-- WHERE p.Price > 100
GROUP BY od.ProductID, p.ProductName
ORDER BY p.ProductName


SELECT od.ProductID, p.ProductName, p.Price, SUM(od.Quantity) AS 'TotalQtySold', MIN(od.Quantity), MAX(od.quantity), COUNT(od.ProductId), AVG(od.Quantity)
FROM [OrderDetails] od
INNER JOIN Products AS p ON od.ProductId = p.ProductID
WHERE p.Price > 100
GROUP BY od.ProductID, p.ProductName
HAVING TotalQtySold > 100
ORDER BY p.ProductName
